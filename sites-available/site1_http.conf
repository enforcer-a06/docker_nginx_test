server {
  # 在哪个端口监听请求
  listen 9100;

  # 用来区分请求 跟上面配合使用 如a.com和b.com都可以接收7000端口过来的请求
  # 然后根据请求的域名或者ip来进行过滤到底哪个server处理，默认不配置就是不区分
  # server_name 127.0.0.1;

  # 响应使用的字符编码
  charset utf-8;

  # 设置网站默认根目录值，location中可以二次覆盖
  root /usr/share/nginx/html/site1;
  index index.html;
  # location有多种配置 语法 location uri
  # 精确匹配 当请求与指定的 URI 完全相同时，这个 location 会被使用。
  # 例子：location = /exact { ... }
  # 前缀匹配 没有特殊修饰符的 location 是前缀匹配。当请求的 URI 以指定的路径开始时，这个 location 会被使用。
  # 例子：location /prefix { ... } 这里需要注意 关于/prefix/和/prefix结尾反斜杠的问题。以及^~强制模式对前缀匹配优先级的影响
  # location /prefix/ 这种配置表示匹配以 /prefix/ 开头的任何请求。末尾的斜杠指定了一个目录或子路径的开始。例如，它会匹配 /static/image.jpg 或 /static/subdir/，但不会匹配 /static（没有尾部斜杠）。
  # location /prefix  这种配置没有斜杠，因此它会匹配任何以 /static 开头的请求，不论之后是否跟有斜杠。例如，它会匹配 /static、/static/、/static/image.jpg 和 /static/subdir/。
  # 正则匹配 使用 ~（区分大小写）或 ~*（不区分大小写）进行正则匹配。
  # 例子：location ~ \.js$ { ... }
  # 上面三种配置模式的优先级是这样的：精确匹配>强制模式的前缀匹配（最长前缀匹配）>正在表达式匹配（上下顺序）>普通前缀匹配（最长前缀匹配）

  location ~ ^/static/(.*)$ {
    add_header name $1 always;
    try_files /static/$1 /static/f1/$1 /static/f2/$1 =404;
    gzip on;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 1k;
    gzip_comp_level 6;
    gzip_types *;
    expires 30d;
  }
}